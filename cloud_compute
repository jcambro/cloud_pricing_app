#! /usr/bin/python2

#Created by John Ambrose

from Tkinter import *

class Application(Tk):
	storage_needed = 0
	read_ops = 0
	write_ops = 0
	data_scan = 0
	data_return = 0

	def __init__(self, *args, **kwargs):
		Tk.__init__(self, *args, **kwargs)
		#setup frame
		container = Frame(self)
		container.pack(side="top", fill="both", expand=True)
		container.grid_rowconfigure(0, weight=1)
		container.grid_columnconfigure(0, weight=1)

		self.frames = {}

		#puts all the frames in a nice container.
		for F in (StartPage, StoragePage, ComputingPage):
			frame = F(container, self)
			self.frames[F] = frame
			frame.grid(row=0, column=0, sticky="nsew")

		#Starts the application at the correct home page
		self.show_frame(StartPage)

	#need a function for this so a button can change pages
	def show_frame(self, context):
		frame = self.frames[context]
		frame.tkraise()

class StartPage(Frame):
	def __init__(self, parent, controller):
		Frame.__init__(self, parent)

		label = Label(self, text="Welcome to the Cloud Pricing App\nYou Can Compare Between Amazon, Google, and the University of Michigan\nPlease Make A Selection Below", font=("Helvetica", 16, "bold"))
		label.pack(padx=10, pady=10)

		storage_page = Button(self, text="Explore Storage Pricing", padx=10, pady=10, command= lambda: controller.show_frame(StoragePage) )
		storage_page.pack()

		compute_page = Button(self, text="Explore Computing Pricing", padx=10, pady=10, command= lambda: controller.show_frame(ComputingPage) )
		compute_page.pack()

#each page is a seperate class with specific functions.
class StoragePage(Frame):
	def __init__(self, parent, controller):
		Frame.__init__(self, parent)
		self.par_controller = controller

		self.label1 = Label(self, text="Storage Needed (GB)")
		self.label1.pack()
		self.entry1 = Entry(self)
		self.entry1.pack()

		self.label2 = Label(self, text="Read Operations (10,000)")
		self.label2.pack()
		self.entry2 = Entry(self)
		self.entry2.pack()

		self.label3 = Label(self, text="Write Operations (10,000)")
		self.label3.pack()
		self.entry3 = Entry(self)
		self.entry3.pack()

		self.label4 = Label(self, text="Data Scanned (GB)")
		self.label4.pack()
		self.entry4 = Entry(self)
		self.entry4.pack()

		self.label5 = Label(self, text="Data Returned (GB)")
		self.label5.pack()
		self.entry5 = Entry(self)
		self.entry5.pack()

		self.calc_button = Button(self, text="Calculate Final Cost", padx=10, pady=10, command=self.get_input )
		self.calc_button.pack()

	#Takes all the text entry input and puts them into variables
	def get_input(self):
		Application.storage_needed = float(self.entry1.get() )
		Application.read_ops = float(self.entry2.get() )
		Application.write_ops = float(self.entry3.get() )
		Application.data_scan = float(self.entry4.get() )
		Application.data_return = float(self.entry5.get() )

		#Delete entries to make room for the final result
		#I cannot make a new page without the variables updating correctly
		self.entry1.pack_forget()
		self.label1.pack_forget()
		self.entry2.pack_forget()
		self.label2.pack_forget()
		self.entry3.pack_forget()
		self.label3.pack_forget()
		self.entry4.pack_forget()
		self.label4.pack_forget()
		self.entry5.pack_forget()
		self.label5.pack_forget()
		self.calc_button.pack_forget()

		self.label6 = Label(self, text="Final Price Calculations", font=("Helvetica", 16, "bold"))
		self.label6.pack()

		#Calculate all of the pricing options
		self.am_s3 = 0.023 * Application.storage_needed + 0.0007 * Application.data_return + 0.002 * Application.data_scan + 0.05 * Application.write_ops + 0.004 * Application.read_ops
		self.am_s3ia = 0.0125 * Application.storage_needed + 0.01 * Application.data_return + 0.002 * Application.data_scan + 0.1 * Application.write_ops + 0.01 * Application.read_ops
		self.am_glac = 0.004 * Application.storage_needed + 0.0025 * Application.data_return + 0.001 * Application.data_scan + 0.5 * Application.write_ops + 0.25 * Application.read_ops

		self.g_mr = 0.026 * Application.storage_needed + 0.05 * Application.write_ops + 0.05 * Application.read_ops
		self.g_near = 0.01 * Application.storage_needed + 0.01 * Application.data_return + 0.1 * Application.write_ops + 0.1 * Application.read_ops
		self.g_cold = 0.007 * Application.storage_needed + 0.05 * Application.data_return + 0.1 * Application.write_ops + 0.1 * Application.read_ops

		self.m_base = 0.0075 * Application.storage_needed
		self.m_bs = 0.009375 * Application.storage_needed
		self.m_br = 0.015 * Application.storage_needed
		self.m_sr = 0.01875 * Application.storage_needed

		#All the Amazon labels and packing
		self.label7 = Label(self, text="Amazon Pricing (per month)", font=("Helvetica", 12, "bold"))
		self.label7.pack()

		self.label8 = Label(self, text="S3 = $" + str(self.am_s3) )
		self.label8.pack()

		self.label9 = Label(self, text="S3 Infrequent Access = $" + str(self.am_s3ia))
		self.label9.pack()

		self.label10 = Label(self, text="Glacier = $" + str(self.am_glac))
		self.label10.pack()

		#All of the Google labels and packing
		self.label11 = Label(self, text="Google Pricing (per month)", font=("Helvetica", 12, "bold"))
		self.label11.pack()

		self.label12 = Label(self, text="Multi-Regional & Regional = $" + str(self.g_mr))
		self.label12.pack()

		self.label13 = Label(self, text="Nearline = $" + str(self.g_near))
		self.label13.pack()

		self.label14 = Label(self, text="Coldline = $" + str(self.g_cold))
		self.label14.pack()

		#All of the Miserver labels and packing
		self.label15 = Label(self, text="MiStorage Pricing (per month)", font=("Helvetica", 12, "bold"))
		self.label15.pack()

		self.label16 = Label(self, text="Base = $" + str(self.m_base))
		self.label16.pack()

		self.label17 = Label(self, text="Base & Snapshots = $" + str(self.m_bs))
		self.label17.pack()

		self.label18 = Label(self, text="Base & Replication = $" + str(self.m_br))
		self.label18.pack()

		self.label19 = Label(self, text="Snapshots & Replication = $" + str(self.m_sr))
		self.label19.pack()

class ComputingPage(Frame):
	def __init__(self, parent, controller):
		Frame.__init__(self, parent)

		label = Label(self, text="Specifications Needed")
		label.pack(padx=10, pady=10)

app = Application()
#app.master.title('Cloud Cost Comparison')
app.mainloop()
