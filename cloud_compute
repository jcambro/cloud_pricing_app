#! /usr/bin/python2

#Created by John Ambrose

from Tkinter import *

class Application(Tk):
	storage_needed = 0
	read_ops = 0
	write_ops = 0
	data_scan = 0
	data_return = 0

	def __init__(self, *args, **kwargs):
		Tk.__init__(self, *args, **kwargs)

		#Tkfont.
		#setup frame
		container = Frame(self)
		container.pack(side="top", fill="both", expand=True)
		container.grid_rowconfigure(0, weight=1)
		container.grid_columnconfigure(0, weight=1)

		self.frames = {}

		#puts all the frames in a nice container.
		for F in (StartPage, StoragePage, ComputingPage):
			frame = F(container, self)
			self.frames[F] = frame
			frame.grid(row=0, column=0, sticky="nsew")

		#Starts the application at the correct home page
		self.show_frame(StartPage)

	#need a function for this so a button can change pages
	def show_frame(self, context):
		frame = self.frames[context]
		frame.tkraise()

class StartPage(Frame):
	def __init__(self, parent, controller):
		Frame.__init__(self, parent)

		label = Label(self, text="Welcome to the Cloud Pricing App\nYou Can Compare Between Amazon, Google, and the University of Michigan\nPlease Make A Selection Below", font=("Helvetica", 16, "bold")).grid(row=0, padx=10, pady=10)
		storage_page = Button(self, text="Explore Storage Pricing", padx=20, pady=10, command= lambda: controller.show_frame(StoragePage) ).grid(row=1, padx=10)
		compute_page = Button(self, text="Explore Computing Pricing", padx=10, pady=10, command= lambda: controller.show_frame(ComputingPage) ).grid(row=2, padx=10)

#each page is a seperate class with specific functions.
class StoragePage(Frame):
	def __init__(self, parent, controller):
		Frame.__init__(self, parent)
		self.par_controller = controller

		self.label1 = Label(self, text="Storage Needed (GB)")
		self.label1.grid(row=0, column=0)
		self.entry1 = Entry(self)
		self.entry1.insert(10, "0")
		self.entry1.grid(row=0, column=1, padx=10, pady=10)

		self.label2 = Label(self, text="Read Operations (10,000)")
		self.label2.grid(row=1, column=0)
		self.entry2 = Entry(self)
		self.entry2.insert(10,"0")
		self.entry2.grid(row=1, column=1, padx=10, pady=10)

		self.label3 = Label(self, text="Write Operations (10,000)")
		self.label3.grid(row=2, column=0)
		self.entry3 = Entry(self)
		self.entry3.insert(10, "0")
		self.entry3.grid(row=2, column=1, padx=10, pady=10)

		self.label4 = Label(self, text="Data Scanned (GB)")
		self.label4.grid(row=3, column=0)
		self.entry4 = Entry(self)
		self.entry4.insert(10, "0")
		self.entry4.grid(row=3, column=1, padx=10, pady=10)

		self.label5 = Label(self, text="Data Returned (GB)")
		self.label5.grid(row=4, column=0)
		self.entry5 = Entry(self)
		self.entry5.insert(10, "0")
		self.entry5.grid(row=4, column=1, padx=10, pady=10)

		self.calc_button = Button(self, text="Calculate Final Cost", padx=10, pady=10, command=self.get_input )
		self.calc_button.grid(columnspan=2, sticky="ew", pady=10)

	#Takes all the text entry input and puts them into variables
	def get_input(self):
		Application.storage_needed = float(self.entry1.get() )
		Application.read_ops = float(self.entry2.get() )
		Application.write_ops = float(self.entry3.get() )
		Application.data_scan = float(self.entry4.get() )
		Application.data_return = float(self.entry5.get() )

		#Delete entries to make room for the final result
		#I cannot make a new page without the variables updating correctly

		self.entry1.grid_remove()
		self.label1.grid_remove()
		self.entry2.grid_remove()
		self.label2.grid_remove()
		self.entry3.grid_remove()
		self.label3.grid_remove()
		self.entry4.grid_remove()
		self.label4.grid_remove()
		self.entry5.grid_remove()
		self.label5.grid_remove()
		self.calc_button.grid_remove()

		self.label6 = Label(self, text="Final Price Calculations", font=("Helvetica", 16, "bold")).grid(column=1)

		#Calculate all of the pricing options
		self.am_s3 = 0.023 * Application.storage_needed + 0.0007 * Application.data_return + 0.002 * Application.data_scan + 0.05 * Application.write_ops + 0.004 * Application.read_ops
		self.am_s3ia = 0.0125 * Application.storage_needed + 0.01 * Application.data_return + 0.002 * Application.data_scan + 0.1 * Application.write_ops + 0.01 * Application.read_ops
		self.am_glac = 0.004 * Application.storage_needed + 0.0025 * Application.data_return + 0.001 * Application.data_scan + 0.5 * Application.write_ops + 0.25 * Application.read_ops

		self.g_mr = 0.026 * Application.storage_needed + 0.05 * Application.write_ops + 0.05 * Application.read_ops
		self.g_near = 0.01 * Application.storage_needed + 0.01 * Application.data_return + 0.1 * Application.write_ops + 0.1 * Application.read_ops
		self.g_cold = 0.007 * Application.storage_needed + 0.05 * Application.data_return + 0.1 * Application.write_ops + 0.1 * Application.read_ops

		self.m_base = 0.0075 * Application.storage_needed
		self.m_bs = 0.009375 * Application.storage_needed
		self.m_br = 0.015 * Application.storage_needed
		self.m_sr = 0.01875 * Application.storage_needed

		#All the Amazon labels and packing
		self.label7 = Label(self, text="Amazon Pricing (per month)", font=("Helvetica", 12, "bold")).grid(row=1, column=0)
		self.label8 = Label(self, text="S3 = $" + str(self.am_s3) ).grid(row=2, column=1)
		self.label9 = Label(self, text="S3 Infrequent Access = $" + str(self.am_s3ia)).grid(row=3, column=1)
		self.label10 = Label(self, text="Glacier = $" + str(self.am_glac)).grid(row=4, column=1)

		#All of the Google labels and packing
		self.label11 = Label(self, text="Google Pricing (per month)", font=("Helvetica", 12, "bold")).grid(row=5, column=0)
		self.label12 = Label(self, text="Multi-Regional & Regional = $" + str(self.g_mr)).grid(row=6, column=1)
		self.label13 = Label(self, text="Nearline = $" + str(self.g_near)).grid(row=7, column=1)
		self.label14 = Label(self, text="Coldline = $" + str(self.g_cold)).grid(row=8, column=1)

		#All of the Miserver labels and packing
		self.label15 = Label(self, text="MiStorage Pricing (per month)", font=("Helvetica", 12, "bold")).grid(row=9, column=0)
		self.label16 = Label(self, text="Base = $" + str(self.m_base)).grid(row=10, column=1)
		self.label17 = Label(self, text="Base & Snapshots = $" + str(self.m_bs)).grid(row=11, column=1)
		self.label18 = Label(self, text="Base & Replication = $" + str(self.m_br)).grid(row=12, column=1)
		self.label19 = Label(self, text="Snapshots & Replication = $" + str(self.m_sr)).grid(row=13, column=1)

class ComputingPage(Frame):
	def __init__(self, parent, controller):
		Frame.__init__(self, parent)
		self.con = controller

		self.label1 = Label(self, text="Please Pick An Option", font=("Helvetica", 16, "bold"))
		self.label1.grid(column=0, pady=10, padx=5)

		self.button1 = Button(self, text="Pre-Built Computing", padx=10, pady=10, command=self.display_general)
		self.button1.grid(row=1, padx=10, pady=5)

		self.button3 = Button(self, text="Build Your Own", padx=25, pady=10, command=self.display_build)
		self.button3.grid(row=3, padx=10, pady=5)

	def display_general(self):
		self.remove_begin_labels()
		self.drop_menu()
		pass

	def display_build(self):
		self.remove_begin_labels()
		pass

	def remove_begin_labels(self):
		self.label1.grid_remove()
		self.button1.grid_remove()
		self.button3.grid_remove()

	def drop_menu(self):
		self.label2 = Label(self, text="Select What You Want To Sort By", font=("Helvetica", 16, "bold"))
		self.label2.grid(row=0, column=0, padx=10, pady=10)

		self.button7 = Button(self, text="RAM", padx=46, pady=5, command=self.drop_menu_2)
		self.button7.grid(row=1, column=0, padx=10)

		self.button4 = Button(self, text="Number of CPUs", padx=10, pady=5, command=self.drop_menu_3)
		self.button4.grid(row=2, column=0, padx=10)

	def drop_menu_2(self):
		self.label2.grid_remove()
		self.button4.grid_remove()
		self.button7.grid_remove()

		self.label3 = Label(self, text="You have selected RAM. How much is required (GB)?")
		self.label3.grid(row=1, column=0, padx=5, pady=5)

		self.entry1 = Entry(self)
		self.entry1.grid(row=1, column=1)

		self.label5 = Label(self, text="Additional Storage needed (GB)")
		self.label5.grid(row=2, column=0, padx=5, pady=5)

		self.entry3 = Entry(self)
		self.entry3.grid(row=2, column=1)

		self.button5 = Button(self, text="Display Prices", padx=5, pady=5, command=self.display_ram)
		self.button5.grid(row=3, column=1, padx=10, pady=5)


	def drop_menu_3(self):
		self.label2.grid_remove()
		self.button4.grid_remove()
		self.button7.grid_remove()

		self.label4 = Label(self, text="You have selected CPUs. How many are required?")
		self.label4.grid(row=1, column=0, padx=5, pady=5)

		self.entry2 = Entry(self)
		self.entry2.grid(row=1, column=1)

		self.label6 = Label(self, text="Additional Storage needed (GB)")
		self.label6.grid(row=2, column=0, padx=5, pady=5)

		self.entry4 = Entry(self)
		self.entry4.grid(row=2, column=1)

		self.button6 = Button(self, text="Display Prices", padx=5, pady=5, command=self.display_cpu)
		self.button6.grid(row=3, column=1, padx=10, pady=5)

	def display_ram(self):
		self.ram_wanted = float(self.entry1.get())
		self.storage_wanted = int(self.entry3.get())

		self.label3.grid_remove()
		self.entry1.grid_remove()
		self.label5.grid_remove()
		self.entry3.grid_remove()
		self.button5.grid_remove()

		self.google = ""
		self.amazon = ""
		self.miserver = ""
		self.tmp = 0

		self.extra = ""
		self.am_ex1 = ""
		self.g_ex1 = ""
		self.am_ex2 = ""
		self.g_ex2 = ""

		if self.ram_wanted <= 2:
			self.tmp = 24.27 + 0.17 * self.storage_wanted
			self.google = "n1-standard-1, 3.75(GB), 1, " + str(self.storage_wanted) + "(GB), $" + str(self.tmp)

			self.tmp = 10.51 + 0.1 * self.storage_wanted
			self.amazon = "t2.small, 2(GB), 1, " + str(self.storage_wanted) + "(GB), $" + str(self.tmp)

			self.tmp = 16.795 + 0.0735 * self.storage_wanted
			self.miserver = "server1, 2(GB), 1, " + str(self.storage_wanted) + "(GB), $" + str(self.tmp)

		elif self.ram_wanted <= 4:
			self.tmp = 48.55 + 0.17 * self.storage_wanted
			self.google = "n1-standard-2, 7.5(GB), 2, " + str(self.storage_wanted) + "(GB), $" + str(self.tmp)

			self.tmp = 41.98 + 0.1 * self.storage_wanted
			self.amazon = "t2.large, 4(GB), 2, " + str(self.storage_wanted) + "(GB), $" + str(self.tmp)

			self.tmp = 31.295 + 0.0735 * self.storage_wanted
			self.miserver = "server2, 4(GB), 2, " + str(self.storage_wanted) + "(GB), $" + str(self.tmp)

		elif self.ram_wanted <= 16:
			self.tmp = 97.09 + 0.17 * self.storage_wanted
			self.google = "n1-standard-4, 15(GB), 4, "  + str(self.storage_wanted) + "(GB), $" + str(self.tmp)

			self.tmp = 83.95 + 0.1 * self.storage_wanted
			self.amazon = "t2.xlarge, 16(GB), 4, " + str(self.storage_wanted) + "(GB), $" + str(self.tmp)

			self.tmp = 118.295 + 0.0735 * self.storage_wanted
			self.miserver = "server3, 16(GB), 4, " + str(self.storage_wanted) + "(GB), $" + str(self.tmp)


		self.label7 = Label(self, text="Selected Machines Based on RAM Requirement\n[machine, RAM, # of CPUs, Storage, Cost/month]", font=("Helvetica", 16, "bold") )
		self.label7.grid(row=0, column=0, padx=10, pady=10, columnspan=2)

		self.label8 = Label(self, text="Google Compute Engine: ")
		self.label8.grid(row=1, column=0, padx=3, pady=7)

		self.label9 = Label(self, text=self.google)
		self.label9.grid(row=1, column=1, padx=3, pady=7)

		self.label10 = Label(self, text="Amazon EC2: ")
		self.label10.grid(row=2, column=0, padx=3, pady=7)

		self.label11 = Label(self, text=self.amazon)
		self.label11.grid(row=2, column=1, padx=3, pady=7)

		self.label12 = Label(self, text="MiServer: ")
		self.label12.grid(row=3, column=0, padx=3, pady=7)

		self.label13 = Label(self, text=self.miserver)
		self.label13.grid(row=3, column=1, padx=3, pady=7)

		self.label14 = Label(self, text=self.extra)
		self.label14.grid(row=4, padx=3, pady=10, columnspan=2)

		self.label15 = Label(self, text=self.g_ex1)
		self.label15.grid(row=5, column=0, padx=3, pady=7)

		self.label16 = Label(self, text=self.g_ex2)
		self.label16.grid(row=5, column=1, padx=3, pady=7)

		self.label17 = Label(self, text=self.am_ex1)
		self.label17.grid(row=6, column=0, padx=3, pady=7)

		self.label18 = Label(self, text=self.am_ex2)
		self.label18.grid(row=6, column=1, padx=3, pady=7)


	def display_cpu(self):
		self.cpu_wanted = float(self.entry2.get())
		self.storage_wanted = float(self.entry4.get())

		self.label4.grid_remove()
		self.entry2.grid_remove()
		self.label6.grid_remove()
		self.entry4.grid_remove()
		self.button6.grid_remove()

		self.label11 = Label(self, text="Selected Machines Based on CPU Requirement\n[machine, RAM, # of CPUs, Storage, Cost/month]", font=("Helvetica", 16, "bold") )
		self.label11.grid(row=0, column=0, padx=10, pady=10)

app = Application()
app.title('Cloud Cost Comparison')
app.mainloop()
